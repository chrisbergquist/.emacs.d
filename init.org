#+TITLE: Emacs Configuration
#+AUTHOR: Chris Bergquist

* Summary
This is my entire Emacs configuration file. Using an org file is an attempt to keep it organized...

* Packages
Initialize package management and install necessary packages for the rest of the file.

#+BEGIN_SRC emacs-lisp :tangle yes
  (package-initialize)
  (require 'package)

  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))

  (if (not package-archive-contents)
      (package-refresh-contents))

  (package-initialize)

  (if (not (package-installed-p 'use-package))
      (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC

* Org Configuration to Lisp
Setup this file to tangle on save and compile to byte code.

#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'org)

  (defun tangle-init ()
    "If the current buffer is 'init.org' the code-blocks are tangled, and the tangled file is compiled."
    (when (equal (buffer-file-name)
                 (expand-file-name (concat user-emacs-directory "init.org")))
      ;; Avoid running hooks when tangling
      (let ((prog-mode-hook nil))
        (org-babel-tangle)
        (byte-compile-file (concat user-emacs-directory "init.el")))))

  (add-hook 'after-save-hook #'tangle-init)
#+END_SRC

* Emacs Behavior
** General
   General configuration to make the default behavior of Emacs better.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package better-defaults)

  (defvar backup-dir (expand-file-name (concat user-emacs-directory "backup/")))
  (defvar autosave-dir (expand-file-name (concat user-emacs-directory "autosave/")))

  (setq inhibit-startup-message t
        initial-scratch-message nil
        backup-directory-alist (list (cons ".*" backup-dir))
        auto-save-list-file-prefix autosave-dir
        auto-save-file-name-transforms `((".*" ,autosave-dir t)))

  (menu-bar-mode 0)
  (toggle-scroll-bar 0)
  (tool-bar-mode 0)
  (global-linum-mode t)
  (global-auto-revert-mode t)

  (defalias 'yes-or-no-p 'y-or-n-p)

  (custom-set-variables
   '(initial-frame-alist (quote ((fullscreen . maximized)))))
  (add-to-list 'default-frame-alist '(font . "Essential PragmataPro 16"))

  (setq ring-bell-function
        (lambda ()
          (let ((orig-fg (face-foreground 'mode-line)))
            (set-face-foreground 'mode-line "#F2804F")
            (run-with-idle-timer 0.1 nil
                                 (lambda (fg) (set-face-foreground 'mode-line fg))
                                 orig-fg))))

  (global-set-key (kbd "C-c s") #'eshell)
  (global-set-key (kbd "C-c a") #'ansi-term)
  (global-set-key (kbd "C-x k") #'kill-this-buffer)

  (server-start)
#+END_SRC

** MacOS Specific
   Configuration specific for MacOS (mainly for PATH loading).

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package exec-path-from-shell
       :demand
       :config
       (with-no-warnings
         (when (memq window-system '(mac ns))
           (setq ns-pop-up-frames nil
                 select-enable-clipboard t)
           (when (fboundp 'mac-auto-operator-composition-mode)
             (mac-auto-operator-composition-mode 1))
           (exec-path-from-shell-initialize))))
   #+END_SRC

** Split Windows
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun my-split-window-sensibly (&optional window)
       (let ((window (or window (selected-window))))
         (or (and (window-splittable-p window t)
                  ;; Split window horizontally.
                  (with-selected-window window
                    (split-window-right)))
             (and (window-splittable-p window)
                  ;; Split window vertically.
                  (with-selected-window window
                    (split-window-below)))
             (and (eq window (frame-root-window (window-frame window)))
                  (not (window-minibuffer-p window))
                  ;; If WINDOW is the only window on its frame and is not the
                  ;; minibuffer window, try to split it horizontally disregarding
                  ;; the value of `split-width-threshold'.
                  (let ((split-width-threshold 0))
                    (when (window-splittable-p window t)
                      (with-selected-window window
                        (split-window-right))))))))

     (setq split-window-preferred-function 'my-split-window-sensibly)
   #+END_SRC
** Create Scratch Buffers
   Function to create new empty buffers in Org mode.

   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun cbergquist-new-empty-buffer ()
       "Create a new empty buffer. It will be named 'untitled' or 'untitled<2>', etc."
       (interactive)
       (let (($buf (generate-new-buffer "untitled")))
         (switch-to-buffer $buf)
         (funcall initial-major-mode)
         (setq buffer-offer-save t)
         $buf))

     (setq initial-major-mode 'org-mode)
     (setq initial-buffer-choice 'cbergquist-new-empty-buffer)
     (bind-key (kbd "C-c n") 'cbergquist-new-empty-buffer)
   #+END_SRC

* UI
** Main Theme

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package solarized-theme
       :config
       (setq solarized-distinct-fringe-background t
           solarized-high-contrast-mode-line t
           solarized-emphasize-indicators nil
           solarized-height-minus-1 1.0
           solarized-height-plus-1 1.0
           solarized-height-plus-2 1.0
           solarized-height-plus-3 1.0
           solarized-height-plus-4 1.0)

       (load-theme 'solarized-dark t))
   #+END_SRC

** Modeline

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package powerline
       :config (powerline-default-theme))

     (use-package airline-themes
       :config (load-theme 'airline-solarized-alternate-gui t))

     (set-face-foreground 'linum "#859900")
   #+END_SRC

** Org Mode

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package org-bullets
       :hook (org-mode . org-bullets-mode))
   #+END_SRC

** General
   #+BEGIN_SRC emacs-lisp :tangle yes
     (set-cursor-color "#DC322F")
     (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
     (add-to-list 'default-frame-alist '(ns-appearance . dark))
     (use-package all-the-icons)
   #+END_SRC
* Tools
** evil
   Use vi keybindings

   #+BEGIN_SRC emacs-lisp :tangle no
     (use-package evil
       :demand
       :init (with-no-warnings
               (setq evil-disable-insert-state-bindings t))
       :config (evil-mode 1))
   #+END_SRC
** diminish

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package diminish
       :demand
       :config
       (with-no-warnings
         (diminish 'eldoc-mode)))
   #+END_SRC

** which-key
   Sets up hints for keyboard shortcuts in minibuffer

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package which-key
       :defer 10
       :diminish which-key-mode
       :config (setq which-key-popup-type 'minibuffer)
       :hook (after-init . which-key-mode))
   #+END_SRC

** company
   "Complete Anything"

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package company
       :defer 10
       :diminish company-mode
       :hook (prog-mode . company-mode))
   #+END_SRC

** ivy
   Better search and completion

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package counsel
       :diminish counsel-mode ivy-mode
       :defines (projectile-completion-system
                 magit-completing-read-function)
       :config
       (setq ivy-use-virtual-buffers t
             enable-recursive-minibuffers t
             ivy-height 15
             ivy-initial-inputs-alist nil
             ivy-extra-directories nil
             ivy-count-format "%d/%d ")

       (with-eval-after-load 'projectile
         (setq projectile-completion-system 'ivy))

       (with-eval-after-load 'magit
         (setq magit-completing-read-function 'ivy-completing-read))
       :hook ((after-init . ivy-mode)
              (ivy-mode . counsel-mode))
       :bind (("C-s" . swiper)
              ("C-c C-r" . ivy-resume)
              ("C-c g" . counsel-git)
              ("C-c j" . counsel-git-grep)
              :map minibuffer-local-map
              ("C-r" . counsel-minibuffer-history)
              :map ivy-minibuffer-map
              ("<return>" . ivy-alt-done)))

     (use-package ivy-rich
       :after counsel
       :diminish ivy-rich-mode
       :hook (ivy-mode . ivy-rich-mode)
       :config
       (setq ivy-format-function #'ivy-format-function-line))
   #+END_SRC

** magit
   Git support at its finest

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package magit
       :bind (("C-c m" . magit-status)))
   #+END_SRC

** projectile
   project management

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package projectile
       :defer 5
       :diminish projectile-mode
       :config
       (with-no-warnings
         (projectile-mode 1)))

     (use-package counsel-projectile
       :bind (("C-c p p" . counsel-projectile-switch-project)
              ("C-c p f" . counsel-projectile-find-file)
              ("C-c p k" . projectile-kill-buffers))
       :diminish counsel-projectile-mode
       :config
       (with-no-warnings
         (counsel-projectile-mode 1)))
   #+END_SRC
** tramp
   Configuration for working with remote hosts

   #+BEGIN_SRC emacs-lisp :tangle yes
     (customize-set-variable
      'tramp-password-prompt-regexp
      (concat
       "^.*"
       (regexp-opt
        '("passphrase" "Passphrase"
          "password" "Password"
          "verification" "Verification")
        t)
       ".*:\0? *"))
   #+END_SRC

** ansi-term (zsh)
   Setup Emacs to use zsh by default and some key-bindings for terminal in Emacs

   #+BEGIN_SRC emacs-lisp :tangle yes
   (with-no-warnings
     (eval-after-load "term"
       '(define-key term-raw-map (kbd "C-c C-y") #'term-paste)))
   #+END_SRC

** multiple-cursors
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package multiple-cursors
       :diminish
       :ensure
       :config
       (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
       (global-set-key (kbd "C->") 'mc/mark-next-like-this)
       (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
       (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))
   #+END_SRC
** git gutter
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package git-gutter-fringe
       :diminish git-gutter-mode
       :config
       (global-git-gutter-mode +1))
   #+END_SRC
* Development
** Editor
   General editor configuration

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package rainbow-delimiters
       :hook (prog-mode . rainbow-delimiters-mode))

     (electric-pair-mode 1)

     (add-hook 'before-save-hook 'delete-trailing-whitespace)

     (setq-default indent-tabs-mode nil
                   tab-width 2)
     (defvaralias 'c-basic-offset 'tab-width)
     (defvaralias 'cperl-indent-level 'tab-width)

     (use-package flycheck
       :diminish flycheck-mode
       :hook (prog-mode . flycheck-mode))

     ;; (use-package flycheck-inline
     ;;   :hook (flycheck-mode . flycheck-inline-mode))

     ;(use-package gud)

     (use-package dockerfile-mode
       :mode ("\\Dockerfile*\\'" . dockerfile-mode)
       :hook (dockerfile-mode . lsp))

     (use-package gitignore-mode
       :mode ("\\gitignore\\'" . gitignore-mode))

     (use-package json-mode
       :mode ("\\.json\\'" . json-mode))

     (use-package web-mode
       :mode ("\\.html\\'" . web-mode))

     (use-package yaml-mode
       :mode ("\\.yml\\'" . yaml-mode))

     (use-package neotree
       :bind ("C-c t" . neotree-toggle)
       :config (with-no-warnings
                 (setq neo-theme (if (display-graphic-p) 'icons 'arrows))))
   #+END_SRC
** LSP Supported Languages
   Adding support for languages that have LSP

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package lsp-mode
       :config (setq lsp-prefer-flymake nil))

     (use-package lsp-ui)

     (use-package company-lsp)
   #+END_SRC

** Scala
   Using Metals to support Scala development

   #+BEGIN_SRC emacs-lisp :tangle yes
     ;; Enable scala-mode and sbt-mode
     (use-package scala-mode
       :hook (scala-mode . lsp)
       :bind (:map scala-mode-map ("C-c C-f" . lsp-format-buffer))
       :mode "\\.s\\(cala\\|bt\\)$")

     (use-package lsp-treemacs
       :bind (:map scala-mode-map ("C-c C-t" . lsp-metals-treeview))
       :config
       (lsp-metals-treeview-enable t))

     (defun sbt-compile ()
       "Invoke sbt compile"
       (interactive)
       (sbt-command "compile"))

     (use-package sbt-mode
       :bind (("C-c b s" . sbt-start)
              ("C-c b w" . sbt-switch-to-active-sbt-buffer)
              ("C-c b r" . sbt-run-previous-command)
              ("C-c b m" . sbt-command)
              ("C-c b c" . sbt-compile))
       :config
       ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
       ;; allows using SPACE when in the minibuffer
       (substitute-key-definition
        'minibuffer-complete-word
        'self-insert-command
        minibuffer-local-completion-map))
   #+END_SRC

** Java
   Add support for Java via lsp-java

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package lsp-java
       :hook (java-mode . lsp))
   #+END_SRC

** Rust
   Using RLS and flycheck-rust for Rust support

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package toml-mode)

     (use-package rust-mode
       :hook (rust-mode . lsp)
       :config (setq rust-format-on-save t))

     ;; Add keybindings for interacting with Cargo
     (use-package cargo
       :hook (rust-mode . cargo-minor-mode))

     (use-package flycheck-rust
       :after flycheck
       :hook (flycheck-mode . flycheck-rust-setup))
   #+END_SRC

** Golang
   Supporting golang

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package go-mode
       :hook (go-mode . lsp))
   #+END_SRC

** Python
   Configuration to support python development

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package lsp-python-ms
       :hook (python-mode . (lambda ()
                              (require 'lsp-python-ms)
                              (lsp))))
   #+END_SRC

** C/C++
   Support for C/C++

   #+BEGIN_SRC emacs-lisp :tangle yes
     (add-hook 'c-mode-hook 'lsp-mode)
     (add-hook 'c++-mode-hook 'lsp-mode)
   #+END_SRC

** Groovy
   Support for Groovy

   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package groovy-mode
       :hook (groovy-mode . lsp)
       :config (setq groovy-indent-offset 2))

   #+END_SRC

** HTML
   Support for HTML

   #+BEGIN_SRC emacs-lisp :tangle yes
     (add-hook 'html-mode-hook 'lsp)

     (require 'css-mode)
     (add-hook 'css-mode-hook 'lsp)
   #+END_SRC
